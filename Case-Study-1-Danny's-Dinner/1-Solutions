--Case Study Questions
--Each of the following case study questions can be answered using a single SQL statement:

--1 What is the total amount each customer spent at the restaurant?

SELECT s.customer_id,SUM(m.price)FROM sales AS s
INNER JOIN menu AS m ON m.product_id=s.product_id
GROUP BY s.customer_id
;

--2 How many days has each customer visited the restaurant?

SELECT customer_id,COUNT(DISTINCT order_date) AS visited_day FROM sales
GROUP BY customer_id
;
--3 What was the first item from the menu purchased by each customer?

WITH CTE AS 
(SELECT 
		s.customer_id,
		m.product_name,
		DENSE_RANK () OVER (PARTITION BY s.customer_id ORDER BY s.order_date) AS rank
FROM sales AS s 
INNER JOIN menu AS m ON m.product_id=s.product_id)
SELECT customer_id,product_name FROM cte
WHERE rank=1;

--4 What is the most purchased item on the menu and how many times was it purchased by all customers?

WITH CTE AS (SELECT
	s.customer_id,
	m.product_name,
	COUNT(s.product_id) purchased_count,
	DENSE_RANK () OVER (PARTITION BY s.customer_id ORDER BY COUNT(s.product_id) DESC) AS rank
FROM sales AS s 
INNER JOIN menu AS m ON m.product_id=s.product_id
GROUP BY s.customer_id,m.product_name)
SELECT
	customer_id,
	product_name,
	purchased_count
FROM cte
WHERE rank=1;

--5 Which item was the most popular for each customer?

WITH CTE AS (SELECT 
	s.customer_id,
	m.product_name,
	COUNT(s.customer_id),
	DENSE_RANK() OVER (PARTITION BY customer_id ORDER BY COUNT(s.customer_id) DESC) AS rank 
FROM sales AS s
INNER JOIN menu AS m ON m.product_id=s.product_id
GROUP BY s.customer_id,m.product_name)
SELECT customer_id,product_name FROM cte
WHERE rank=1;

--6 Which item was purchased first by the customer after they became a member?

WITH CTE AS (SELECT 
 	s.customer_id,
	m.product_name,
	mem.join_date,
	s.order_date,
 	DENSE_RANK() OVER (PARTITION BY s.customer_id ORDER BY order_date) AS rank 
FROM sales AS s 
INNER JOIN menu AS m ON m.product_id=s.product_id
INNER JOIN members AS mem ON mem.customer_id=s.customer_id
WHERE order_date>=join_date
ORDER BY order_date)
SELECT customer_id,product_name,join_date,order_date FROM cte
WHERE rank=1;

--7 Which item was purchased just before the customer became a member?

WITH CTE AS (SELECT 
 	s.customer_id,
	m.product_name,
	mem.join_date,
	s.order_date,
 	DENSE_RANK() OVER (PARTITION BY s.customer_id ORDER BY order_date DESC) AS rank 
FROM sales AS s 
INNER JOIN menu AS m ON m.product_id=s.product_id
INNER JOIN members AS mem ON mem.customer_id=s.customer_id
WHERE join_date>order_date)
SELECT customer_id,product_name,join_date,order_date FROM cte
WHERE rank=1;

--8 What is the total items and amount spent for each member before they became a member?

SELECT 
 	s.customer_id,
	m.product_name,
	SUM(m.price) AS total_amount_before_membeship
FROM sales AS s 
INNER JOIN menu AS m ON m.product_id=s.product_id
INNER JOIN members AS mem ON mem.customer_id=s.customer_id
WHERE join_date>order_date
GROUP BY s.customer_id,m.product_name
;

--9 If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

WITH CTE AS (SELECT 
*,
CASE
WHEN product_name='sushi' THEN price*10*2
ELSE price*10
END AS points
FROM sales AS s 
INNER JOIN menu AS m ON m.product_id=s.product_id)
SELECT customer_id,SUM(points) AS total_points FROM cte
GROUP BY customer_id;

--Alternate solution

SELECT s.customer_id, SUM(CASE 
WHEN product_name='sushi' THEN price*2*10
ELSE price*10
END) AS points
FROM sales AS s
INNER JOIN menu AS m ON m.product_id=s.product_id
GROUP BY customer_id;


--10 In the first week after a customer joins the program (including their join date) they earn 
--2x points on all items, not just sushi - how many points do customer A and B have at the end of January?--1

SELECT 
s.customer_id,
SUM(CASE
WHEN mem.join_date BETWEEN s.order_date AND s.order_date+6 THEN price*10*2
WHEN product_name='sushi' THEN price*10*2
ELSE price*10
END) AS points_after_join_first_week
FROM menu AS m
INNER JOIN sales AS S ON m.product_id=s.product_id
INNER JOIN members AS mem ON mem.customer_id=s.customer_id
WHERE DATE_PART('month',order_date)=1
GROUP BY s.customer_id;

--BONUS STUDÄ°ES

--11 Join All The Things
--The following questions are related creating basic data tables that Danny and his team can use to 
--quickly derive insights without needing to join the underlying tables using SQL.

SELECT s.customer_id,s.order_date,m.product_name,m.price,
CASE 
WHEN mem.join_date IS NULL THEN 'N'
WHEN s.order_date<mem.join_date THEN 'N'
ELSE 'Y'
END AS case_mem
FROM sales AS s
LEFT JOIN members AS mem ON mem.customer_id=s.customer_id
INNER JOIN menu AS m ON m.product_id=s.product_id
ORDER BY s.customer_id,
s.order_date,
m.price DESC;

--12 Rank All The Things 

--Danny also requires further information about the ranking of customer products, 
--but he purposely does not need the ranking for non-member purchases so he expects null ranking values for the records 
--when customers are not yet part of the loyalty program.


WITH case_mem_rank AS (SELECT s.customer_id,s.order_date,m.product_name,m.price,
CASE 
WHEN mem.join_date IS NULL THEN 'N'
WHEN s.order_date<mem.join_date THEN 'N'
ELSE 'Y'
END AS case_mem
FROM sales AS s
LEFT JOIN members AS mem ON mem.customer_id=s.customer_id
INNER JOIN menu AS m ON m.product_id=s.product_id
ORDER BY s.customer_id,
		s.order_date,
		m.price DESC)
SELECT customer_id,order_date,product_name,case_mem,price,
CASE
WHEN case_mem='N' THEN NULL
ELSE DENSE_RANK () OVER (
PARTITION BY customer_id,case_mem
ORDER BY order_date ASC
)
END AS dannys_rank
FROM case_mem_rank;

